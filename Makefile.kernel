TOOLCHAIN_PREFIX = arm-none-eabi-
CC = $(TOOLCHAIN_PREFIX)gcc
CXX = $(TOOLCHAIN_PREFIX)gcc
LINK = $(TOOLCHAIN_PREFIX)gcc
OBJCOPY = $(TOOLCHAIN_PREFIX)objcopy
MKDIR = mkdir
FIND = find

KERNEL_BIN = rpi-js-os

ASFLAGS = -mcpu=arm1176jzf-s -fpic -ffreestanding $(DEFINES) -I./src
CRTFLAGS = -mcpu=arm1176jzf-s -fpic -ffreestanding -std=gnu99 -O2 -Wall -Wextra $(DEFINES)
CXXFLAGS = -mcpu=arm1176jzf-s -fpic -ffreestanding -std=gnu++14 -O2 -Wall -Wextra -pedantic -fno-rtti -fno-exceptions $(DEFINES) -I./src -I./ext/newlib-2.4.0/newlib/libc/include
LDFLAGS = -ffreestanding -O2 -nostdlib -T src/linker-$(CONFIG).ld

CRTBEGIN_OBJ:=$(shell $(CC) $(CRTFLAGS) -print-file-name=crtbegin.o)
CRTEND_OBJ:=$(shell $(CC) $(CRTFLAGS) -print-file-name=crtend.o)
KERNEL_SOURCES:=$(shell $(FIND) src -name '*.cc')
KERNEL_OBJECTS:=$(patsubst %.cc,build/$(CONFIG)/%.o,$(subst /,_,$(patsubst src/%,%,$(KERNEL_SOURCES))))

print-%  : ; @echo $* = $($*)

all: build/$(CONFIG)/$(KERNEL_BIN)

build/$(CONFIG):
	$(MKDIR) -p build/$(CONFIG)

build/$(CONFIG)/$(KERNEL_BIN): build/$(CONFIG)/$(KERNEL_BIN).elf
	$(OBJCOPY) $< -O binary $@

build/$(CONFIG)/$(KERNEL_BIN).elf: build/$(CONFIG)/crti.o build/$(CONFIG)/boot.o $(KERNEL_OBJECTS) build/$(CONFIG)/crtn.o
	$(LINK) $(LDFLAGS) -o $@ \
		build/$(CONFIG)/crti.o \
		$(CRTBEGIN_OBJ) \
		build/$(CONFIG)/boot.o \
		$(KERNEL_OBJECTS) \
		build/newlib/arm-none-eabi/newlib/libc/libc.a \
		$(CRTEND_OBJ) \
		build/$(CONFIG)/crtn.o \
		-lgcc

build/$(CONFIG)/crti.o: src/crti.c build/$(CONFIG)
	$(CC) $(CRTFLAGS) -c $< -o $@

build/$(CONFIG)/crtn.o: src/crtn.c build/$(CONFIG)
	$(CC) $(CRTFLAGS) -c $< -o $@

build/$(CONFIG)/boot.o: src/boot.S build/$(CONFIG)
	$(CC) $(ASFLAGS) -c $< -o $@

build/$(CONFIG)/%.o: build/$(CONFIG)
	$(CXX) $(CXXFLAGS) -c $(patsubst %.o,src/%.cc,$(subst _,/,$(patsubst build/$(CONFIG)/%,%,$@))) -o $@

.PHONY: all build/$(CONFIG)/%.o
